#!/usr/bin/env python3

import cv2
import numpy as np
import time
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge


class MarkerDetectEstimate(Node):
    def __init__(self):
        super().__init__('MarkerDetecter')  # ROS 2 노드 초기화

        # ✅ OpenCV-ROS 변환 브리지 생성
        self.bridge = CvBridge()

        # ✅ 필요한 인자들 초기화
        self.ZedCvImage = None  # ZED 카메라에서 받은 이미지
        self.MarkerSize = 0.2  # 20cm 마커 크기
        self.FrameUndistorted = None  # 왜곡 보정된 이미지

        # ✅ ZED 카메라 이미지 구독 (left_gray 이미지 사용)
        self.st_SubZEDImage = self.create_subscription(
            Image,
            '/zed/zed_node/left_gray/image_rect_gray',
            self.ZEDImageCallBack,
            10
        )

        # ✅ 카메라 내부 행렬 (Intrinsic Matrix)
        self.st_IntrinsicParameter = np.array([
            [519.5989379882812, 0, 645.4970092773438],
            [0, 519.5989379882812, 364.4530944824219],
            [0, 0, 1]
        ], dtype=np.float32)

        # ✅ 왜곡 계수 (Distortion Coefficients)
        self.st_DistortionParameter = np.zeros((1, 12), dtype=np.float32)

        # ✅ ArUco 검출기 설정
        self.Dict_AruCo = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_50)
        self.AruCoParams = cv2.aruco.DetectorParameters()
        self.ArucoDetector = cv2.aruco.ArucoDetector(self.Dict_AruCo, self.AruCoParams)

        # ✅ ZED 카메라에서 첫 번째 이미지를 받을 때까지 대기
        while self.ZedCvImage is None:
            print("📌 Waiting for ZED image...")
            rclpy.spin_once(self)  # ROS 메시지가 올 때까지 대기

        print("✅ ZED image received! Starting ArUco detection...")

    def ZEDImageCallBack(self, msg):
        """
        📌 ZED 카메라에서 이미지를 수신하면 OpenCV 포맷으로 변환 후 처리
        """
        self.ZedCvImage = self.bridge.imgmsg_to_cv2(msg, desired_encoding="mono8")
        self.process_frame()

    def undistort_frame(self, frame):
        """
        📌 입력 이미지를 왜곡 보정
        """
        return cv2.undistort(frame, self.st_IntrinsicParameter, self.st_DistortionParameter)

    def detect_markers_and_estimate_pose(self, frame):
        """
        📌 ArUco 마커 검출 및 3D 포즈 추정
        """
        corners, ids, _ = self.ArucoDetector.detectMarkers(frame)
        if ids is not None:
            cv2.aruco.drawDetectedMarkers(frame, corners, ids)
            rvecs, tvecs, _ = cv2.aruco.estimatePoseSingleMarkers(
                corners, self.MarkerSize, self.st_IntrinsicParameter, self.st_DistortionParameter
            )
            return corners, ids, rvecs, tvecs
        return None, None, None, None

    def display_marker_info(self, frame, corners, ids, rvecs, tvecs):
        """
        📌 검출된 마커의 정보를 화면에 출력
        """
        for i in range(len(ids)):
            corner = corners[i][0]
            center_x = int(np.mean(corner[:, 0]))
            center_y = int(np.mean(corner[:, 1]))

            pos_x, pos_y, pos_z = tvecs[i][0]
            rot_matrix, _ = cv2.Rodrigues(rvecs[i])
            euler_angles = cv2.RQDecomp3x3(rot_matrix)[0]

            cv2.drawFrameAxes(frame, self.st_IntrinsicParameter, self.st_DistortionParameter, rvecs[i], tvecs[i], self.MarkerSize / 2)

            cv2.putText(frame, f"ID: {ids[i][0]}", (center_x, center_y - 40),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

            cv2.putText(frame, f"Pos: ({pos_x:.2f}, {pos_y:.2f}, {pos_z:.2f})m",
                        (center_x, center_y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

            cv2.putText(frame, f"Rot: ({euler_angles[0]:.1f}, {euler_angles[1]:.1f}, {euler_angles[2]:.1f})deg",
                        (center_x, center_y + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

    def process_frame(self):
        """
        📌 ZED 카메라로 받은 이미지 처리 → 왜곡 보정 → 마커 검출 및 정보 출력
        """
        if self.ZedCvImage is None:
            return

        # 🔹 이미지 왜곡 보정
        self.FrameUndistorted = self.undistort_frame(self.ZedCvImage)

        # 🔹 ArUco 마커 검출 및 3D 포즈 추정
        corners, ids, rvecs, tvecs = self.detect_markers_and_estimate_pose(self.FrameUndistorted)

        # 🔹 검출된 마커가 있으면 정보 출력
        if ids is not None:
            self.display_marker_info(self.FrameUndistorted, corners, ids, rvecs, tvecs)

        # 🔹 결과 이미지 출력
        cv2.imshow("ZED Image with ArUco Detection", self.FrameUndistorted)
        cv2.waitKey(1)


def main(args=None):
    """
    📌 ROS 2 노드를 초기화하고 ArUco 마커 검출 실행
    """
    rclpy.init(args=args)
    RosNode = MarkerDetectEstimate()
    
    try:
        rclpy.spin(RosNode)  # ROS 2 노드 실행
    except KeyboardInterrupt:
        print("🔴 Shutting down ArUco detection.")

    RosNode.destroy_node()
    rclpy.shutdown()
    cv2.destroyAllWindows()  # 모든 OpenCV 창 닫기


if __name__ == '__main__':
    main()

